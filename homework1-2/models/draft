const express = require("express")
const router = express.Router()
const { default: mongoose } = require('mongoose')
const Joi = require("joi")



const userSchema = new mongoose.Schema({
    name: {
        type: String, required: true, minlength: 3, maxlength: 50 },
    email: {
        type: String, required: true, minlength: 3, maxlength: 50 },
    phone: { 
        type: Number, required: true, minlength: 10, maxlength: 12 },
    image: {
        type: String,
        required: false,
    },
    password: {
        type: String,
        required: true,
    },
    created: {
        type: Date,
        required: true,
        default: Date.now,
    },
});

const User = mongoose.model('User', userSchema)

function validateuser(user){
    const schema = Joi.object({
        name: Joi.string().min(3).max(50).required(),
        email: Joi.string().min(3).max(50).required(),
        phone: Joi.number().min(10).max(12).required(),

    })
    return schema.validate(user);
}

module.exports.userSchema = userSchema;
module.exports.User = User;
module.exports.validateuser = validateuser;
module.exports = mongoose.model('User', userSchema)


// edit route
router.post('/:id', upload, (req, res) => {
    let id = req.params.id;
    let new_image = "";

    if(req.file){
        new_image = req.file.filename;
        try{
            fs.unlinkSync('./uploads' + req.body.old_image);
        } catch(err) {
            console.log(err)
        }
    } else {
        new_image = req.body.old_image;
    }

    User.findByIdAndUpdate(id, {
        name: req.body.name,
        email: req.body.email,
        phone: req.body.phone,
        image: new_image, 
    }, (err, result)=> {
        if(err){
            res.json({message: err.message, type: 'danger'});
        } else {
            req.session.message = {
                type: 'success',
                message: 'User Updated Successfully!',
            };
            res.redirect('/');
        }
    })
})


//users controller
//save user object
            // const user = await newUser.save();
            
            // const token = newUser.generateAuthToken()
            // res.header("Content-Type", "multipart/form-data").header( "x-auth-token", token);
            
            // console.log(token);
            
            // User = new User(
            //   _.pick(req.body, ['email', 'password'])
            // )
            // const users = await User.create(data)
            // await users.save();